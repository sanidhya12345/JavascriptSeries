Scope:-
Variable is the fundamental part in programming. We declare variable to store different data types. To declare a variable we use the key word var, let and const. A variable can be declared at different scope. In this section, we will see the scope variables, scope of variables when we use var or let. Variables scopes can be:

1.Global
2.Local

Variable can be declared globally or locally scope.

Window Global Object:-
Without using console.log() open your browser and check, you will see the value of a and b if you write a or b on the browser. That means a and b are already available in the window.

//scope.js
a = 'JavaScript' // declaring a variable without let or const make it available in window object and this found anywhere
b = 10 // this is a global scope variable and found in the window object
function letsLearnScope() {
  console.log(a, b)
  if (true) {
    console.log(a, b)
  }
}
console.log(a, b) // accessible

Global scope
A globally declared variable can be accessed every where in the same file. But the term global is relative. It can be global to the file or it can be global relative to some block of codes.

//scope.js
let a = 'JavaScript' // is a global scope it will be found anywhere in this file
let b = 10 // is a global scope it will be found anywhere in this file
function letsLearnScope() {
  console.log(a, b) // JavaScript 10, accessible
  if (true) {
    let a = 'Python'
    let b = 100
    console.log(a, b) // Python 100
  }
  console.log(a, b)
}
letsLearnScope()
console.log(a, b) // JavaScript 10, accessible

Local scope
A variable declared as local can be accessed only in certain block code.

Block Scope
Function Scope
//scope.js
let a = 'JavaScript' // is a global scope it will be found anywhere in this file
let b = 10 // is a global scope it will be found anywhere in this file
// Function scope
function letsLearnScope() {
  console.log(a, b) // JavaScript 10, accessible
  let value = false
// block scope
  if (true) {
    // we can access from the function and outside the function but 
    // variables declared inside the if will not be accessed outside the if block
    let a = 'Python'
    let b = 20
    let c = 30
    let d = 40
    value = !value
    console.log(a, b, c, value) // Python 20 30 true
  }
  // we can not access c because c's scope is only the if block
  console.log(a, b, value) // JavaScript 10 true
}
letsLearnScope()
console.log(a, b) // JavaScript 10, accessible

A variable declared with var only scoped to function but variable declared with let or const is block scope(function block, if block, loop block, etc). Block in JavaScript is a code in between two curly brackets ({}).

Object
Everything can be an object and objects do have properties and properties have values, so an object is a key value pair. The order of the key is not reserved, or there is no order. To create an object literal, we use two curly brackets.

Creating an empty object
An empty object

const person = {}


Creating an objecting with values:-

example:-

const rectangle={
    length:20,
    breadth:20
}
console.log(rectangle)

Getting values from an object
We can access values of object using two methods:

using . followed by key name if the key-name is a one word
using square bracket and a quote

const person={
    firstName='sanidhya',
    lastName='varshney',
    age:21,
    country:'India',
    city:'Aligarh',
    skills:[
        'Java',
        'HTML',
        'CSS',
        'JavaScript',
        'SQL',
        'Python
    ]
    getFullName:function(){
        return `${this.firstName}${this.lastName}`
    },
}
// accessing values using .
console.log(person.firstName)
console.log(person.lastName)
console.log(person.age)
console.log(person.location) // undefined

// value can be accessed using square bracket and key name
console.log(person['firstName'])
console.log(person['lastName'])
console.log(person['age'])
console.log(person['age'])
console.log(person['location']) // undefined

Creating object methods
Now, the person object has getFullName properties. The getFullName is function inside the person object and we call it an object method. The this key word refers to the object itself. We can use the word this to access the values of different properties of the object. We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself. Example of object:

const person={
    firstName='sanidhya',
    lastName='varshney',
    age:21,
    country:'India',
    city:'Aligarh',
    skills:[
        'Java',
        'HTML',
        'CSS',
        'JavaScript',
        'SQL',
        'Python
    ]
    getFullName:function(){
        return `${this.firstName}${this.lastName}`
    },
}

console.log(person.getFullName())

Setting new key for an object
An object is a mutable data structure and we can modify the content of an object after it gets created.

Setting a new keys in an object

person.nationality='Hindu'
person.title='student'
person.skills.push('Firebase')
person.isMarried=false


Object Methods
There are different methods to manipulate an object. Let us see some of the available methods.

Object.assign: To copy an object without modifying the original object

const copyPerson=Object.assign({},person)
console.log(copyPerson)

Getting object keys using Object.keys()
Object.keys: To get the keys or properties of an object as an array

const keys=Object.keys(copyPerson)
console.log(keys)

Getting object values using Object.values()
Object.values:To get values of an object as an array

const values = Object.values(copyPerson)
console.log(values)

Checking properties using hasOwnProperty()
hasOwnProperty: To check if a specific key or property exist in an object

console.log(copyPerson.hasOwnProperty('name'))
console.log(copyPerson.hasOwnProperty('score'))


